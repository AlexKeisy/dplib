#include <GPIO_F407xx.h>


// declarations for internal  use
#define GPIO_mode             0x00000003U
#define EXTI_mode             0x10000000U
#define GPIO_MODE_IT          0x00010000U
#define GPIO_MODE_EVT         0x00020000U
#define RISING_EDGE           0x00100000U
#define FALLING_EDGE          0x00200000U
#define GPIO_OUTPUT_TYPE      0x00000010U

#define GPIO_MAX_PORT 8


#define  ONE_BIT    0x01UL
#define  TWO_BIT    0x03UL
#define  THREE_BIT  0x07UL
#define  FOUR_BIT   0x0FUL

#define __DP_RCC_SYSCFG_CLK_ENABLE()   do { \
                                        __IO uint32_t tmpreg = 0x00U; \
                                        SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);\
                                        /* Delay after an RCC peripheral clock enabling */ \
                                        tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);\
                                        UNUSED(tmpreg); \
                                          } while(0U)


void pinInit(hpin _pin, uint32_t _mode,  uint32_t _pull , uint32_t _alternate , uint32_t _speed){
	uint32_t pp = pinPort(_pin);
	GPIO_TypeDef_p _base = (GPIO_TypeDef_p)(GPIOA_BASE+PIN_BASE_INC*pp);
	pinNum_t pn =pinNum(_pin);
	uint32_t temp ;
	uint32_t iocurrent ;
    iocurrent = 0x01U << pn;
    //enable tact`ing
    if ((RCC->AHB1ENR & (0x01U<<pp)) == 0  ){
        RCC->AHB1ENR |=0x01U <<pp;//PORTpp enable tact`s
    }

    /*--------------------- GPIO Mode Configuration ------------------------*/
    /* Alternate function programmed allways. set to 0 if need */
    /* Configure Alternate function mapped with the current IO */
	MODIFY_REG(_base->AFR[pn>>3],FOUR_BIT <<((pn & THREE_BIT)*4),(uint32_t)_alternate <<((pn & THREE_BIT)*4) );

    /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
	MODIFY_REG(_base->MODER, (TWO_BIT <<(pn*2)),((_mode & GPIO_mode)<<(pn*2)) );


    /* In case of Output or Alternate function mode selection */
    if((_mode == GPIO_MODE_OUTPUT_PP) || (_mode == GPIO_MODE_AF_PP) ||
       (_mode == GPIO_MODE_OUTPUT_OD) || (_mode == GPIO_MODE_AF_OD))
    {
      /*!!! Check the Speed parameter */
      //assert_param(IS_GPIO_SPEED(_speed));
      /* Configure the IO Speed */
      MODIFY_REG(_base->OSPEEDR,TWO_BIT <<(pn*2),(uint32_t)_speed <<(pn*2) );

      /* Configure the IO Output Type */
      MODIFY_REG(_base->OTYPER,pinMask(_pin), (((_mode & GPIO_OUTPUT_TYPE) >> 4U) <<pn) );
    }

    /* Activate the Pull-up or Pull down resistor for the current IO */
	MODIFY_REG(_base->PUPDR,TWO_BIT <<(pn*2),_pull <<(pn*2) );

    /*--------------------- EXTI Mode Configuration ------------------------*/
    /* Configure the External Interrupt or event for the current IO */
    if((_mode & EXTI_mode) == EXTI_mode)
    {
      /* Enable SYSCFG Clock */
      __DP_RCC_SYSCFG_CLK_ENABLE();

      temp = SYSCFG->EXTICR[pn >> 2U];
      temp &= ~(0x0FU << (4U * (pn & 0x03U)));
      temp |= ((uint32_t)(pinPort(_pin)) << (4U * (pn & 0x03U)));
      SYSCFG->EXTICR[pn >> 2U] = temp;

      /* Clear EXTI line configuration */
      temp = EXTI->IMR;
      temp &= ~((uint32_t)iocurrent);
      if((_mode & GPIO_MODE_IT) == GPIO_MODE_IT)
      {
        temp |= iocurrent;
      }
      EXTI->IMR = temp;

      temp = EXTI->EMR;
      temp &= ~((uint32_t)iocurrent);
      if((_mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
      {
        temp |= iocurrent;
      }
      EXTI->EMR = temp;

      /* Clear Rising Falling edge configuration */
      temp = EXTI->RTSR;
      temp &= ~((uint32_t)iocurrent);
      if((_mode & RISING_EDGE) == RISING_EDGE)
      {
        temp |= iocurrent;
      }
      EXTI->RTSR = temp;

      temp = EXTI->FTSR;
      temp &= ~((uint32_t)iocurrent);
      if((_mode & FALLING_EDGE) == FALLING_EDGE)
      {
        temp |= iocurrent;
      }
      EXTI->FTSR = temp;
    }

};



